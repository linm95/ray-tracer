#include "trimesh.h"
#include <assert.h>
#include <float.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include "../ui/TraceUI.h"
extern TraceUI* traceUI;

using namespace std;

Trimesh::~Trimesh()
{
	for (auto m : materials)
		delete m;
	for (auto f : faces)
		delete f;
}

// must add vertices, normals, and materials IN ORDER
void Trimesh::addVertex(const glm::dvec3& v)
{
	vertices.emplace_back(v);
}

void Trimesh::addMaterial(Material* m)
{
	materials.emplace_back(m);
}

void Trimesh::addNormal(const glm::dvec3& n)
{
	normals.emplace_back(n);
}

bool Trimesh::isTrimesh(){return true; }
std::vector<TrimeshFace *>::iterator Trimesh::beginFace(){return faces.begin(); }
std::vector<TrimeshFace *>::iterator Trimesh::endFace(){return faces.end(); }

// Returns false if the vertices a,b,c don't all exist
bool Trimesh::addFace(int a, int b, int c)
{
	int vcnt = vertices.size();

	if (a >= vcnt || b >= vcnt || c >= vcnt)
		return false;

	TrimeshFace* newFace = new TrimeshFace(
	        scene, new Material(*this->material), this, a, b, c);
	newFace->setTransform(this->transform);
	if (!newFace->degen)
		faces.push_back(newFace);
	else
		delete newFace;

	// Don't add faces to the scene's object list so we can cull by bounding
	// box
	return true;
}

// Check to make sure that if we have per-vertex materials or normals
// they are the right number.
const char* Trimesh::doubleCheck()
{
	if (!materials.empty() && materials.size() != vertices.size())
		return "Bad Trimesh: Wrong number of materials.";
	if (!normals.empty() && normals.size() != vertices.size())
		return "Bad Trimesh: Wrong number of normals.";

	return 0;
}

bool Trimesh::intersectLocal(ray& r, isect& i) const
{
	bool have_one = false;
	for (auto face : faces) {
		isect cur;
		if (face->intersectLocal(r, cur)) {
			if (!have_one || (cur.getT() < i.getT())) {
				i = cur;
				have_one = true;
			}
		}
	}
	if (!have_one)
		i.setT(1000.0);
	return have_one;
}


bool TrimeshFace::intersect(ray& r, isect& i) const
{
	return intersectLocal(r, i);
}

// Intersect ray r with the triangle abc.  If it hits returns true,
// and put the parameter in t and the barycentric coordinates of the
// intersection in u (alpha) and v (beta).
void TrimeshFace::initialize() const{
	n = normal;
	a = parent->vertices[ids[0]];
	b = parent->vertices[ids[1]];
	c = parent->vertices[ids[2]];
	v0 = b - a;
	v1 = c - a;
	d00 = glm::dot(v0, v0);
	d01 = glm::dot(v0, v1);
	d11 = glm::dot(v1, v1);
	invDenom = 1 / (d00 * d11 - d01 * d01);
	initialized = true;
}
bool TrimeshFace::intersectLocal(ray& r, isect& i) const
{
	// YOUR CODE HERE
	//
	// FIXME: Add ray-trimesh intersection
	glm::dvec3 o = r.getPosition();
	glm::dvec3 d = r.getDirection();

	if(!initialized){
		initialize();
	}

	double dn = glm::dot(d, n);
	double t = glm::dot(a - o, n) / dn;
	if(t <= RAY_EPSILON)
		return false;

	glm::dvec3 p = o + d * t;

	glm::dvec3 m;
	glm::dvec3 v2 = p - a;
  double d20 = glm::dot(v2, v0);
  double d21 = glm::dot(v2, v1);
	m[1] = (d11 * d20 - d01 * d21) * invDenom;
	m[2] = (d00 * d21 - d01 * d20) * invDenom;
	m[0] = 1.0 - m[1] - m[2];
	for(int k = 0; k < 3; k++){
 		if(m[k] < 0 || m[k] > 1)
			return false;
	}
	i.setBary(m);
	i.setT(t);
	glm::dvec3 phongNormal = glm::dvec3(0.0, 0.0, 0.0);
	if(parent->normals.size()){
		for(int i = 0; i < 3; i++)
			phongNormal += m[i] * parent->normals[ids[i]];
		phongNormal = glm::normalize(phongNormal);
	}else
		phongNormal = normal;
	i.setN(phongNormal);
	Material phongMaterial = Material();
	if(parent->materials.size()){
		for(int i = 0; i < 3; i++)
			phongMaterial += m[i] * (*(parent->materials[ids[i]]));
	}
	else
		phongMaterial = getMaterial();
	i.setMaterial(phongMaterial);
	//i.setObject(&getScene());
	double len = glm::distance(p, glm::dvec3(0,0,0));
	double u = acos(p[2] / len);
	double v = acos(p[0] / (len * sin(u)));
	i.setUVCoordinates(glm::dvec2(u, v));
	return true;
}

// Once all the verts and faces are loaded, per vertex normals can be
// generated by averaging the normals of the neighboring faces.
void Trimesh::generateNormals()
{
	int cnt = vertices.size();
	normals.resize(cnt);
	std::vector<int> numFaces(cnt, 0);

	for (auto face : faces) {
		glm::dvec3 faceNormal = face->getNormal();

		for (int i = 0; i < 3; ++i) {
			normals[(*face)[i]] += faceNormal;
			++numFaces[(*face)[i]];
		}
	}

	for (int i = 0; i < cnt; ++i) {
		if (numFaces[i])
			normals[i] /= numFaces[i];
	}

	vertNorms = true;
}
